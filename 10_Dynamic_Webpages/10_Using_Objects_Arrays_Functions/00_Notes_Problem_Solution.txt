Problem:
In this project, we'll use objects, arrays, and functions
to add items to a cart to build the online store.


Task:
Part I
Let's work on the basic structure of the website
by coding images, headings and buttons.

Part II
We've got the products down. 
Let's focus on getting the shopping cart, number of items, 
and total cost onto the webpage.

Part III
We've got the structure in place, 
but we'll need to move these elements around with some CSS.
Let's move the shopping cart to the right-hand corner of the page
and display the products next to each other.

Part IV
With the HTML and CSS making our page look great,
let's add items to the cart and update the item counter with JavaScript.

Part V
Great job making the item counter update with each click of an "Add to Cart" button.
Now, let's show the total cost of all items in the cart
when users click on the cart image.

Part VI
Let's create a function that adds a shipping cost based on the 'total'.
If the customer's 'total' is high enough, we'll apply a discount.

Part VII
To finish the website, we'll add a section at the bottom
that'll act as a placeholder for relevent information like contact details.

 
Solution:
Part I
*.  Code the doctype, html and body elements.
1.  We'll need 'div' elements to hold the different products the store has to offer.
    Create a 'div' element with class set to 'product'.
2.  Inside the div element, display the product's image 
    using the source "https://mimo.app/i/backpack.png".
3.  Inside the same div, create an 'h3' heading displaying "Backpack".
    Then, create a 'button' displaying "Add to Cart".
4.  Let's add a camera as another product for the store.
    Underneath the first 'div', add a second 'div' with the same class.
5.  In the second div, display an image with "https://mimo.app/i/camera.png".
    Then, add an 'h3' heading displaying "Camera".
    Last, create a button displaying "Add to Cart".

Part II
1.  At the top of the page, 
    give this webpage an 'h1' heading displaying "Online Store".
2.  Below the "Online Store" heading,   
    create an image displaying "https://mimo.app/i/cart.png"
    with 'id' set to 'basketImage'.
3.  We'll need a place to show the number of items in the cart.
    Add an 'h2' heading displaying the number "0" with the ID 'itemCounter'.
4.  For the total cost of the items in the cart, create a 'p' element with ID 'orderTotal'.
    We'll display the total using JavaScript later.
5.  Let's tidy this page up with some CSS. Include "style.css" in this webpage.

Part III
1.  Although it contains no text, let's move the element with ID 'orderTotal'
    to the right with 'margin-right' set to '16px' and 'text-align' to 'right'.
2.  The next element to move to the right has ID 'itemCounter'.
    Set its 'position' to 'absolute', 
    its 'right' property to '56px' and its 'top' property to '0px'.
3.  Let's move the cart image too. Use the ID 'basketImage' to set 'position' to 'absolute',
    the 'right' property to '16px', and the 'top' property to '16px'.
4.  Let's place those products next to each other.
    Using the 'product' class, set 'display' to 'inline-block', 'margin' to '5px'.
5.  Last, use the body selector to set the text color to 'midnightBlue'
    and the font family to 'Helvetica Neue'.

Part IV
1.  The best way to store cart items is 
    by creating a variable named 'cartItems' that stores an empty array.
2.  For each product, we'll create an object.
    Create a variable named 'backpack' that stores an object with
    'name' and 'price' as properties and "Backpack" & 400.
3.  We'll need a similar variable storing an object for the camera.
4.  Next, create an 'addToCart' function with 'item' as a parameter.
5.  Make sure that the 'addToCart' function adds each 'item'
    to the 'cartItems' array using 'push()'.
6.  In the 'addToCart' function, update the element
    with ID 'itemCounter' to the length of the cartsItems array.
7.  Make the "Add to Cart" buttons interactive by setting the 'onclick'
    attribute to 'addToCart(backpack)' or 'addToCart(camera)',
    depending on the product.

Part V
1.  Since, the cart total is hidden, create an 'isTotalHidden' variable
    and set it to 'true'.
2.  At the bottom of the page, create a 'clickCart' function
    that sets 'isTotalHidden' to the opposite of its current value.
3.  At the bottom of the page, create a 'showTotal()' function.
    Then, call it inside the 'addToCart' and 'clickCart' function.
4.  Inside 'showTotal()', create an 'orderTotal' variable
    and set it to the element with ID 'orderTotal'. Then, set its innerHTML to "".
5.  We need to check if we should show or hide the total cost.
    Inside the 'showTotal()', create an if statement that checks
    if 'isTotalHidden' is 'false'.
6.  Inside the if statement, update the 'orderTotal' element to display
    "Total: $" and the sum of all the price inside the 'cartItems' array.
7.  To let users show and hide the total, set the 'onclick' attribute
    of the image with ID 'basketImage' to 'clickCart()'.
    Then, try tapping the cart.

Part VI
1.  We'll display the shipping cost below the order total.
    To add it, code a new 'p' element with the ID 'shippingTotal'.
2.  Complete the styling for 'shippingTotal' by setting the
    'margin-right' by 16 pixels and setting 'text-align' to the right.
3.  We'll use a function to calculate shipping based on the value of 'total'.
    Add a 'calculateShipping()' function with a parameter named 'total'.
4.  Create a variable called 'shipping' but don't assign it a value yet.
    This will hold the value of shipping costs.
5.  The cost of shipping will depend on the total of the customer's order.
    To get started with this logic, add the outline of an 'if' statement.
6.  When the order total is '700' or greater, customer receive discounted shipping
    Add a condition that checks if 'total' is greater or equal to '700'.
7.  Inside the 'if' statement, assign the value of 'shipping' to '30'.
8.  When the customer spends less than '700' we'll apply a standard shipping price.
    Code the outline of an 'else' statement to get started.
9.  Assign 'shipping' to '50'.
10. Finally, add a 'return' statement to return 'shipping'.

Part VII
1.  We'll use flexbox to lay that out. To get started,
    add a new 'item' class to 'style.css' and give it a 'margin' of '5px'.
2.  Next up we'll create a 'container' class to hold our flex items.
3.  To make this element a flex container,
    set the 'display' property to 'flex'.
4.  We want our flex items to be in a column formation and aligned to the middle,
    so set 'flex-direction' and 'align-items' accordingly.
5.  To finish up styling our flex container, add a 'margin' property
    and set a 'border' that's solid and '2px'.
6.  Now its time to add a container to our HTML file.
    Code the parent 'div' element and set it's class to 'container'.
7.  Add the first 'div' element to the container for "About Us".
8.  Set the class of div to 'item'.
9.  To finish up, add the final 'div' element with the correct class
    inside the container for "Container"