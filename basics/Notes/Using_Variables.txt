Problem:
Have you tried to convert miles to kilometers or the other way around?
Spoiler alert: It's tough.

We'll make it easier by building a converter app
to solve this problem for good.


Solution:
1. Start by creating a variable for 'miles'.
2. Give miles an initial value of 500.
3. Create a 'kilometers' variable and give it the value of 'miles'.
4. A mile is about 1.609344 kilometers. 
   Let's transform miles into kilometers by multiplying the number of miles by that number.
   Update 'kilometers' by multiplying miles by '1.609344'.
5. Now it's times to display the converted distance in the console.
   Use 'console.log()' to display the value of 'kilometers'.
6. Check by changing the value of 'miles' and check what happens in the console.



--------------------------------------------------------------------------------------------------



Problem:
Let's use our knowledge about HTML, CSS and variables in JavaScript
to build a user profile for an online retro game.


Task:
Part I
We'll kick off the webpage by adding the HTML structure 
and some CSS to style the body. 

Part II
Let's add some more specific style rules to set apart
the Username and the Character paragraphs.

Part III
Let' create some variables for the username and character name
we'll display on the webpage.

To get you started, we added a script element that let's your
JavaScript code interact with the webpage. We'll learn more about it later.


Solution:
Part I
*. Code the doctype, html, head and body elements.
1. For the game logo, code an 'img' element with the 'src' attribute
   set to "https://mimo.app/i/super-villains-logo.png"
2. To display the username, add a p element that displays "Username".
   Then, set its class attribute to 'username'.
3. To display the game character, add a p element that displays "Character".
   Then, set its class attribute to 'character'.
4. Let's add some style.
   Start by coding the 'link' element with 'rel' set to 'stylesheet' 
   and 'href' set to 'style.css'.

Part II
1. Create an empty rule for the body element.
2. Code the background color attribute, add a colon,
   and set it to 'antiqueWhite'. Add a semi-colon in the end.
3. Set the page's text color by coding the 'color' attribute
   with the value 'black'.
4. Give the profile a retro vibe by setting the 'font-family'
   attribute to 'courier new, courier, monospace'.
5. Finally position the text in the center of the page by
   adding the 'text-align' attribute set to 'center'.

Part III
1. Create an empty p rule so we can style both paragraphs.
2. For all paragraphs, set 'font-size' to 22px.
3. Code a border to surround each paragraph by
   setting the border to solid 3px black.
4. Style the border's corners by setting the border radius to 5 pixels.
5. Finally, add some space between the text and the border 
   using the padding property to 7px 10px 7px 10px.
6. To define the style attributes for the username paragraph,
   Create an empty rule with the '.username' selector.
7. Set the username paragraph's background color to cornSilk.
8. Just like before, create an empty rule for the elements of class 'character'.
9. Set the character paragraph's background color to mistyRose.


Part IV
1. For the first name of the user,
   create a variable named 'firstName' with the value "Mike".
2. For the last name, create a 'lastName' variable and set it to "Tyson".
3. Create a variable named 'username' and set it to "Username: " + firstName.
4. Continue the expression by adding " " 
   followed by 'lastName' to the 'username' variable.
5. Use console.log() to display username in the console.
6. Next, code a variable 'characterName' to save 
   the user's chosen character, "Dr. Doom".
7. To create a nice message for users, create a character variable
   with the value "Character" + characterName.
8. Finally, code a display statement to make the game character 
   information in the variable 'character pop up in the console.
9. To display username on the webpage, add an id in the first p element as 'username' and
   code 'document.getElementById("username").innerHTML = username;'
10. To display character on the webpage, add an id in the first p element as 'character' and
   code 'document.getElementById("character").innerHTML = character;'
11. Finally, try changing the values of 'firstName', 'lastName' and 'characterName'
    to see how they change what displays on the webpage.