Problem:
Joe is involved in developing an adventure game.
He's in charge of the human and pirate characters.


Task:
We'll give him a hand in customizing the character's behaviors.


Solution:
1.  Let's jump right into it 
    and create a class to represent all 'Human' characters.
2.  To create 'Human' character instances, we'll need a constructor.
3.  To tell the characters apart, we need to add a 'name' property.
    Code the missing parameter, 
    then use 'this' to store its value in a 'name' property.
4.  Since this is a multi-player game, 
    we want the characters to interact with each other. To do that, we'll add a method.
    Code a 'say()' method that accepts 'stuff' as a parameter.
5.  When a human says something, we want to display it.
    Type in an empty display statement and don't forget to add a semicolon at the end.
6.  To better track the dialogue between characters,
    we want to display their name when they speak.
    Code the display statement so that the displayed text
    starts with the 'name' property.
7.  Next, onto the pirate character!
    Since a pirate is also a human, we can have 'Pirate' extend 'Human'.
8.  Yarr! Pirates have their own way of saying things.
    Override the say() method for the 'Pirate' class.
9.  But we still want a pirate's name and the message to appear when they speak.
    Call the superclass's 'say()' method.
10. Whenever a pirate says something, they finish with "Yarr!".
    Use 'console.log()' to display the 'name' property along with "Yarr!".
11. Let's take our characters for a test drive.
    Create an instance of 'Human'.
12. Next, create an instance of 'Pirate'.
13. Now, let's have the characters communicate with each other.
    From the 'human' instance, call the 'say()' method 
    to display Frances's greeting.
14. To respond to France's greeting, put together the code to call
    the 'say()' method from the 'pirate' instance.