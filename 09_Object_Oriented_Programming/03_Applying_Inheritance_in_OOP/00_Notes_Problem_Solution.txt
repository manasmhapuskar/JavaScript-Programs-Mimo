Problem:
Let's practice our knowledge of inheritance by fixing some code.


Available Code:
Take a look at this code for a social networking app 
that lets users post their current status.
function createUser(name) {
    var user = {
        name: name,
        status: '',
        updateStatus: function(status) {
            user.status = status;
        }
    };
    
    return user;
}

var user1 = createUser("Matt");
var user2 = createUser("Mary");
var user3 = createUser("John");

user1.updateStatus("Out fishing");

console.log(user1);
console.log(user2);
console.log(user3);


Task:
A developer wrote a 'createUser()' function to create new user objects.
The problem is that each user has its own 'updateStatus()' method.

If too many users sign up, the server could crash.
Let's fix that by making the code use classes.


Solution:
1.  We'll use classes to create efficient user objects 
    that inherit the common 'updateStatus()' method. 
    Start by coding 'class User {}'.
2.  Each object needs a 'name' property, so let's set up a constructor
    that accepts a 'name' parameter by coding 'constructor(name) {}'.
3.  To make the constructor set the 'name' property on each object,
    code 'this.name = name;'.
4.  Each object has a 'status' property that the user can update.
    We'll set its initial value to an empty string by coding 'this.status = ""'.
5.  To code the method that updates the status, 
    let's add 'updateStatus(status) {}'.
6.  To make the method update the user's 'status' property
    with the status we passed in, add 'this.status = status;'.
7.  We're now ready to create our first user.
    Create a new instance of 'User' called 'user1' 
    whose name property is set to "Matt".
8.  Let's test the code we wrote by calling user1's
    updateStatus() method with "Writing code".
9.  Finally, let's display 'user1' in the console to check that the status is updated
    and that 'user1' does not have its own copy of the method.