Problem:
A less experienced programmer created a virtial piggy bank in FP,
making it hard to keep track of the 'value' variable.


Task:
Let's fix this by writing the code in the OOP style.


Available Code:
function addMoney(value, amount) {
    return value + amount;
}

var value = 0;

var value = addMoney(value, 100);
value = addMoney(value, 50);
value = addMoney(value, 22);

console.log(value);


Solution:
1.  Create an object named 'myPiggy'.
2.  Let start by creating a 'value' property
    that can be easily updated and seting it to 0.
3.  Next, add a method called 'addMoney()'
    that accepts a parameter called 'amount'.
4.  Now, let's make 'addMoney()' update 'value'
    every time we add money to the virtual piggy bank.
5.  Let's add $100 into our piggy bank
    by coding 'myPiggy.addMoney(100);'
6.  Finally, let's display the 'myPiggy.value'
    to see if it actually got updated.



---------------------------------------------------------------------------------------------------



Problem:
Let's convert this non-encapsulated FP code into OOP code.


Available Code:
var base = 3;
var height = 4;

function getArea(base, height) {
    return base * height;
}

var areaOfRectangle = getArea(base, height);
console.log(areaOfRectangle);


Solution:
1.  First, create an empty object called 'rectangle'.
2.  To encapsulate the code, we'll turn the variables
    into properties and the function into a method. Code the correct values.
3.  Next, we'll finish the 'getArea()' object method.
    Add 'rectangle.base', '*' and then 'rectangle.height'.
4.  At this point, we can remove the old FP code.
    Let's call the rectangle's 'getArea()' method and display the result.
5.  Now that 'rectangle' is an object, we can track of its properties
    and update them whenever we want. Update the 'base' property to see.