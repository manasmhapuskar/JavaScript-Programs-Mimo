Problem:
Early calculators could only perform one operation: addition.
To compute 7 times 3, for example, users had to add repeatedly.


Task:
Let's improve this calculator by coding 'multiply()' method
that abstracts away these repeated 'add()' calls.

 
Available Code:

class Calculator {
    constructor(value) {
        this.value = value;
    }
    
    add(num) {
        this.value += num;
    }
}

var calculator = new Calculator(7);
calculator.add(7);
calculator.add(7);
console.log(calculator);


Solution:
1.  Start by coding 'multiply(num) {}'.
    This method will take a number 
    and multiply it to the calculator's current value.
2.  We'll need to hold the calculator's initial value,
    so let's store it by coding 'var value = this.value;'.
3.  Since, multiplication in this case is just repeated addition,
    we can use a 'for' loop. We'll leave the statements empty for now.
    Add 'for () {}'.
4.  Code 'this.add(value)'.
    In each iteration, 'add()' will increase the calculator's 
    current value by its initial value.
5.  Since, we start adding from the initial value and not from 0,
    we only iterate 'num - 1' times, instead of 'num' times.
    One way to do this is to start the counter from 1 instead of 0.
    Add 'var i = 1; i < num; i++'.
6.  Our calculator is now ready to multiply.
    Create a new instance of 'Calculator' called 'calculator'
    with an initial value set to 7.
7.  Let's test the 'multiply()' method 
    we wrote by calling it with 6 as an argument.
8.  To see the result, display the instance 'calculator'.