Problem:
In this project, we'll practice 'encapsulation' by creating an object
that contains a customer's information inside a banking app.


Solution:
1.  Let's start by coding 'var customer = {};' to create an empty object.
2.  One of the main features of being a bank customer 
    is having a checking account. Let's create one and set an initial value.
    Code a 'checking' property with the value set to 0.
3.  Bank customers also have savings accounts. Let's add that as a property.
    Code a 'savings' property and set its value to 0.
4.  The customer should have the ability 
    to deposit money to their checking account.
    Add the object method, 'deposit: function(amount) {}'.
5.  Next, we want to add any deposited amount to the 'checking' property.
    We can do that by coding 'customer.checking += amount;'.
6.  The customer should be able to transfer money
    from their checkings to their savings.
    To do that, first add 'transfer: function(amount) {}'.
7.  Next, code 'customer.checking -= amount;'.
    This deducts the amount specified from the customer's checking amount.
8.  Now add 'customer.savings += amount;'.
    This adds the deducted amount to their savings.
9.  Our object is now ready to use.
    Let's help our customer deposit 1000 into their checking
    by coding 'customer.deposit(1000);'.
10. The customer now wants to transfer 200 of it into their savings.
    We can do this by coding 'customer.transfer(200);'.
11. Let's display the customer's checking and savings balances.
12. Encapsulating the customer's data and functions keeps them in one place
    and allows us to easily access them as members of 'customer'.